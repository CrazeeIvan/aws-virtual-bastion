'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactWebTerminalKeyboardData = require('./react-web-terminal-keyboard-data');

var _reactWebTerminalInput = require('./react-web-terminal-input.js');

var _reactWebTerminalInput2 = _interopRequireDefault(_reactWebTerminalInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WebTerminal = function (_React$Component) {
  _inherits(WebTerminal, _React$Component);

  // TODO add inline styles so they can be changed dynamically
  // TODO add ability to disable/enable input buffer
  // TODO add ajax call function that disables input then re-enables after callback runs
  // TODO unicode support
  function WebTerminal(props) {
    _classCallCheck(this, WebTerminal);

    var _this = _possibleConstructorReturn(this, (WebTerminal.__proto__ || Object.getPrototypeOf(WebTerminal)).call(this, props));

    _this.state = {
      log: [],
      logId: 0,
      commandHandler: props.commandHandler ? props.commandHandler : function (component) {
        return component.output(component.input());
      },
      keyStrokeMap: props.keyStrokeMap || {},
      style: {
        reactWebTerminal: {},
        reactWebTerminalInput: {},
        reactWebTerminalInputBuffer: {},
        reactWebTerminalCursor: {}
      }
    };
    
    return _this;
  }

  _createClass(WebTerminal, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.root.scrollTop = this.root.scrollHeight;
    }
  }, {
    key: 'addToLog',
    value: function addToLog(text, className) {
      this.state.log.push({
        'id': this.state.logId,
        'class': className,
        'text': text
      });

      this.state.logId++;

      this.setState(this.state);
    }
  }, {
    key: 'input',
    value: function input() {
      return this.inputComp.getInput();
    }
  }, {
    key: 'output',
    value: function output(_output) {
      this.addToLog(_output, 'react-web-terminal-output');

      this.resetInputBuffer();

      this.setState(this.state);
    }
  }, {
    key: 'resetInputBuffer',
    value: function resetInputBuffer() {
      this.inputComp.resetInputBuffer();
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(e) {
      if (!this.keyStrokeMapHandler(e)) this.inputComp.handleKeyDown(e);
    }
  }, {
    key: 'onPaste',
    value: function onPaste(e) {
      this.inputComp.onPaste(e);
    }
  }, {
    key: 'onCommandEntered',
    value: function onCommandEntered() {
      this.addToLog(this.inputComp.state.prompt + this.input(), 'react-web-terminal-input');
      this.state.commandHandler(this);
    }
  }, {
    key: 'keyStrokeMapHandler',
    value: function keyStrokeMapHandler(e) {
      var keyStroke = (0, _reactWebTerminalKeyboardData.getKeyStroke)(e);
      if (keyStroke in this.state.keyStrokeMap) return this.state.keyStrokeMap[keyStroke](this) !== false ? true : false;else return false;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var logNodes = this.state.log.map(function (item) {
        return _react2.default.createElement(
          'div',
          { key: item.id, className: item.class },
          _react2.default.createElement(
            'pre',
            null,
            item.text
          )
        );
      });

      return _react2.default.createElement(
        'div',
        { tabIndex: '-1', ref: function ref(root) {
            _this2.root = root;
          }, className: 'react-web-terminal', onKeyDown: this.handleKeyDown.bind(this), onPaste: this.onPaste.bind(this) },
        logNodes,
        _react2.default.createElement(_reactWebTerminalInput2.default, { ref: function ref(input) {
            _this2.inputComp = input;
          }, prompt: this.props.prompt, onCommandEntered: this.onCommandEntered.bind(this) })
      );
    }
  },
  {
    key: 'componentDidMount',
    value: function(){
      this.root.focus();
    }
  }]);

  return WebTerminal;
}(_react2.default.Component);

exports.default = WebTerminal;