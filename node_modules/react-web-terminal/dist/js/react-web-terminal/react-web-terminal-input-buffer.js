'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactWebTerminalKeyboardData = require('./react-web-terminal-keyboard-data');

var _reactWebTerminalCursor = require('./react-web-terminal-cursor.js');

var _reactWebTerminalCursor2 = _interopRequireDefault(_reactWebTerminalCursor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WebTerminalInputBuffer = function (_React$Component) {
  _inherits(WebTerminalInputBuffer, _React$Component);

  function WebTerminalInputBuffer(props) {
    _classCallCheck(this, WebTerminalInputBuffer);

    var _this = _possibleConstructorReturn(this, (WebTerminalInputBuffer.__proto__ || Object.getPrototypeOf(WebTerminalInputBuffer)).call(this, props));

    _this.state = {
      input: ''
    };
    return _this;
  }

  _createClass(WebTerminalInputBuffer, [{
    key: 'getInput',
    value: function getInput() {
      return this.state.input;
    }
  }, {
    key: 'resetInputBuffer',
    value: function resetInputBuffer() {
      this.state.input = '';
      this.cursor.moveToBegining();
    }
  }, {
    key: 'insertText',
    value: function insertText(text) {
      this.state.input = this.getPreCursorStr() + text + this.cursor.getCursorChar() + this.getPostCursorStr();
      this.cursor.moveRight(text.length);
      this.setState(this.state);
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(e) {
      
      var key = (0, _reactWebTerminalKeyboardData.getKey)(e);
      if (key === 'Enter') {
        this.onCommandEntered();
      } else if (key === 'Backspace') {
        var newPreCursorStr = this.getPreCursorStr().slice(0, this.getPreCursorStr().length - 1);
        this.state.input = newPreCursorStr + this.cursor.getCursorChar() + this.getPostCursorStr();
        this.cursor.moveLeft();
        this.setState(this.state);
      } else if (key === 'ArrowLeft') {
        this.cursor.moveLeft();
        this.forceUpdate();
      } else if (key === 'ArrowRight') {
        this.cursor.moveRight();
        this.forceUpdate();
      } else if (_reactWebTerminalKeyboardData.nonPrintableKeys.indexOf(key) === -1 && !e.altKey && !e.ctrlKey && !e.metaKey) {
        this.insertText(key);
      }
      
    }
  }, {
    key: 'onPaste',
    value: function onPaste(e) {
      var pastedText = e.clipboardData.getData('Text');
      this.insertText(pastedText);
    }
  }, {
    key: 'onCommandEntered',
    value: function onCommandEntered() {
      if (this.props.onCommandEntered) this.props.onCommandEntered();
    }
  }, {
    key: 'getPreCursorStr',
    value: function getPreCursorStr() {
      var cursorPos = this.cursor ? this.cursor.getCursorPos() : 0;
      return this.getInput().slice(0, cursorPos);
    }
  }, {
    key: 'getPostCursorStr',
    value: function getPostCursorStr() {
      var cursorPos = this.cursor ? this.cursor.getCursorPos() : 0;
      return this.getInput().slice(cursorPos + 1, this.getInput().length);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'span',
        { className: 'react-web-terminal-input-buffer', ref: (lastBuffer) => {this.lastBuffer=lastBuffer;} },
        this.getPreCursorStr(),
        _react2.default.createElement(_reactWebTerminalCursor2.default, { ref: function ref(cursor) {
            _this2.cursor = cursor;
           
          }, inputMethod: this.getInput.bind(this) }),
        this.getPostCursorStr()
      );
    }
  },
  {
    key: 'componentDidUpdate',
    value: function(){
      this.lastBuffer.scrollIntoView();
    }
  }]);

  return WebTerminalInputBuffer;
}(_react2.default.Component);

exports.default = WebTerminalInputBuffer;