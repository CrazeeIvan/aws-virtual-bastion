(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("React"));
	else if(typeof define === 'function' && define.amd)
		define(["React"], factory);
	else if(typeof exports === 'object')
		exports["WebTerminal"] = factory(require("React"));
	else
		root["WebTerminal"] = factory(root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_6__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(1);
	
	var _reactWebTerminal = __webpack_require__(5);
	
	var _reactWebTerminal2 = _interopRequireDefault(_reactWebTerminal);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	module.exports = _reactWebTerminal2.default;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(2);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/index.js?outputStyle=expanded&includePaths[]=/Users/jyannes/development/react-web-terminal/bower_components&includePaths[]=/Users/jyannes/development/react-web-terminal/node_modules!./react-web-terminal.scss", function() {
				var newContent = require("!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/index.js?outputStyle=expanded&includePaths[]=/Users/jyannes/development/react-web-terminal/bower_components&includePaths[]=/Users/jyannes/development/react-web-terminal/node_modules!./react-web-terminal.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports
	
	
	// module
	exports.push([module.id, "@keyframes cursor-blink {\n  50% {\n    background-color: #fff;\n  }\n}\n\n.react-web-terminal {\n  height: calc(100% - (2 * 16px));\n  width: calc(100% - (2 * 16px));\n  padding: 16px;\n  background-color: #000;\n  color: #fff;\n  font-family: monospace;\n  overflow: scroll;\n}\n\n.react-web-terminal pre {\n  font-family: monospace;\n  margin: 0;\n}\n\n.react-web-terminal .react-web-terminal-input {\n  white-space: nowrap;\n}\n\n.react-web-terminal:focus .react-web-terminal-input .react-web-terminal-input-buffer .react-web-terminal-cursor {\n  animation: cursor-blink 1s linear infinite;\n}\n", ""]);
	
	// exports


/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(6);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactWebTerminalKeyboardData = __webpack_require__(7);
	
	var _reactWebTerminalInput = __webpack_require__(8);
	
	var _reactWebTerminalInput2 = _interopRequireDefault(_reactWebTerminalInput);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var WebTerminal = function (_React$Component) {
	  _inherits(WebTerminal, _React$Component);
	
	  // TODO add inline styles so they can be changed dynamically
	  // TODO add ability to disable/enable input buffer
	  // TODO add ajax call function that disables input then re-enables after callback runs
	  // TODO unicode support
	  function WebTerminal(props) {
	    _classCallCheck(this, WebTerminal);
	
	    var _this = _possibleConstructorReturn(this, (WebTerminal.__proto__ || Object.getPrototypeOf(WebTerminal)).call(this, props));
	
	    _this.state = {
	      log: [],
	      logId: 0,
	      commandHandler: props.commandHandler ? props.commandHandler : function (component) {
	        return component.output(component.input());
	      },
	      keyStrokeMap: props.keyStrokeMap || {},
	      style: {
	        reactWebTerminal: {},
	        reactWebTerminalInput: {},
	        reactWebTerminalInputBuffer: {},
	        reactWebTerminalCursor: {}
	      }
	    };
	    return _this;
	  }
	
	  _createClass(WebTerminal, [{
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.root.scrollTop = this.root.scrollHeight;
	    }
	  }, {
	    key: 'addToLog',
	    value: function addToLog(text, className) {
	      this.state.log.push({
	        'id': this.state.logId,
	        'class': className,
	        'text': text
	      });
	
	      this.state.logId++;
	
	      this.setState(this.state);
	    }
	  }, {
	    key: 'input',
	    value: function input() {
	      return this.inputComp.getInput();
	    }
	  }, {
	    key: 'output',
	    value: function output(_output) {
	      this.addToLog(_output, 'react-web-terminal-output');
	
	      this.resetInputBuffer();
	
	      this.setState(this.state);
	    }
	  }, {
	    key: 'resetInputBuffer',
	    value: function resetInputBuffer() {
	      this.inputComp.resetInputBuffer();
	    }
	  }, {
	    key: 'handleKeyDown',
	    value: function handleKeyDown(e) {
	      if (!this.keyStrokeMapHandler(e)) this.inputComp.handleKeyDown(e);
	    }
	  }, {
	    key: 'onPaste',
	    value: function onPaste(e) {
	      this.inputComp.onPaste(e);
	    }
	  }, {
	    key: 'onCommandEntered',
	    value: function onCommandEntered() {
	      this.addToLog(this.inputComp.state.prompt + this.input(), 'react-web-terminal-input');
	      this.state.commandHandler(this);
	    }
	  }, {
	    key: 'keyStrokeMapHandler',
	    value: function keyStrokeMapHandler(e) {
	      var keyStroke = (0, _reactWebTerminalKeyboardData.getKeyStroke)(e);
	      if (keyStroke in this.state.keyStrokeMap) return this.state.keyStrokeMap[keyStroke](this) !== false ? true : false;else return false;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var logNodes = this.state.log.map(function (item) {
	        return _react2.default.createElement(
	          'div',
	          { key: item.id, className: item.class },
	          _react2.default.createElement(
	            'pre',
	            null,
	            item.text
	          )
	        );
	      });
	
	      return _react2.default.createElement(
	        'div',
	        { tabIndex: '-1', ref: function ref(root) {
	            _this2.root = root;
	          }, className: 'react-web-terminal', onKeyDown: this.handleKeyDown.bind(this), onPaste: this.onPaste.bind(this) },
	        logNodes,
	        _react2.default.createElement(_reactWebTerminalInput2.default, { ref: function ref(input) {
	            _this2.inputComp = input;
	          }, prompt: this.props.prompt, onCommandEntered: this.onCommandEntered.bind(this) })
	      );
	    }
	  }]);
	
	  return WebTerminal;
	}(_react2.default.Component);
	
	exports.default = WebTerminal;

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = React;

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.getKey = getKey;
	exports.getKeyStroke = getKeyStroke;
	var keymap = {
	    8: ['Backspace', 'Backspace'],
	    9: ['Tab', 'Tab'],
	
	    12: ['Clear', 'Clear'],
	    13: ['Enter', 'Enter'],
	
	    16: ['Shift', 'Shift'],
	    17: ['Control', 'Control'],
	    18: ['Alt', 'Alt'],
	
	    20: ['CapsLock', 'CapsLock'],
	
	    27: ['Escape', 'Escape'],
	
	    32: [' ', ' '],
	    33: ['PageUp', 'PageUp'],
	    34: ['PageDown', 'PageDown'],
	    35: ['End', 'End'],
	    36: ['Home', 'Home'],
	    37: ['ArrowLeft', 'ArrowLeft'],
	    38: ['ArrowUp', 'ArrowUp'],
	    39: ['ArrowRight', 'ArrowRight'],
	    40: ['ArrowDown', 'ArrowDown'],
	
	    46: ['Delete', 'Delete'],
	
	    48: ['0', ')'],
	    49: ['1', '!'],
	    50: ['2', '@'],
	    51: ['3', '#'],
	    52: ['4', '$'],
	    53: ['5', '%'],
	    54: ['6', '^'],
	    55: ['7', '&'],
	    56: ['8', '*'],
	    57: ['9', '('],
	
	    65: ['a', 'A'],
	    66: ['b', 'B'],
	    67: ['c', 'C'],
	    68: ['d', 'D'],
	    69: ['e', 'E'],
	    70: ['f', 'F'],
	    71: ['g', 'G'],
	    72: ['h', 'H'],
	    73: ['i', 'I'],
	    74: ['j', 'J'],
	    75: ['k', 'K'],
	    76: ['l', 'L'],
	    77: ['m', 'M'],
	    78: ['n', 'N'],
	    79: ['o', 'O'],
	    80: ['p', 'P'],
	    81: ['q', 'Q'],
	    82: ['r', 'R'],
	    83: ['s', 'S'],
	    84: ['t', 'T'],
	    85: ['u', 'U'],
	    86: ['v', 'V'],
	    87: ['w', 'W'],
	    88: ['x', 'X'],
	    89: ['y', 'Y'],
	    90: ['z', 'Z'],
	    91: ['Meta', 'Meta'],
	
	    106: ['*', '*'],
	    107: ['+', '+'],
	
	    109: ['-', '-'],
	    110: ['.', '.'],
	    111: ['/', '/'],
	    112: ['F1', 'F1'],
	    113: ['F2', 'F2'],
	    114: ['F3', 'F3'],
	    115: ['F4', 'F4'],
	    116: ['F5', 'F5'],
	    117: ['F6', 'F6'],
	    118: ['F7', 'F7'],
	    119: ['F8', 'F8'],
	    120: ['F9', 'F9'],
	    121: ['F10', 'F10'],
	    122: ['F11', 'F11'],
	    123: ['F12', 'F12'],
	    124: ['F13', 'F13'],
	    125: ['F14', 'F14'],
	    126: ['F15', 'F15'],
	    127: ['F16', 'F16'],
	    128: ['F17', 'F17'],
	    129: ['F18', 'F18'],
	    130: ['F19', 'F19'],
	
	    186: [';', ':'],
	    187: ['=', '+'],
	    188: [',', '<'],
	    189: ['-', '_'],
	    190: ['.', '>'],
	    191: ['/', '?'],
	    192: ['`', '~'],
	
	    219: ['[', '{'],
	    220: ['\\', '|'],
	    221: [']', '}'],
	    222: ['\'', '"']
	
	};
	
	function getKey(e) {
	    var key = '';
	    if (e.key && e.key !== 'Unidentified') {
	        key = e.key;
	    } else {
	        key = e.shiftKey ? keymap[e.which][1] : keymap[e.which][0];
	    }
	    return key;
	}
	
	function getKeyStroke(e) {
	    var keyTemp = getKey(e);
	    var key = keyTemp === ' ' ? 'Space' : keyTemp;
	
	    var keyStroke = [];
	    if (e.ctrlKey || key === 'Control') keyStroke.push('Control');
	    if (e.altKey || key === 'Alt') keyStroke.push('Alt');
	    if (e.metaKey || key === 'Meta') keyStroke.push('Meta');
	    if (e.shiftKey || key === 'Shift') keyStroke.push('Shift');
	    if (keyStroke.indexOf(key) === -1) keyStroke.push(key);
	
	    return keyStroke.join('+');
	}
	
	var nonPrintableKeys = exports.nonPrintableKeys = ['Backspace', 'Tab', 'Clear', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock', 'Escape', 'PageUp', 'PageDown', 'End', 'Home', 'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown', 'Delete', 'Meta', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'F13', 'F14', 'F15', 'F16', 'F17', 'F18', 'F19'];

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(6);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactWebTerminalInputBuffer = __webpack_require__(9);
	
	var _reactWebTerminalInputBuffer2 = _interopRequireDefault(_reactWebTerminalInputBuffer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var WebTerminalInput = function (_React$Component) {
	  _inherits(WebTerminalInput, _React$Component);
	
	  function WebTerminalInput(props) {
	    _classCallCheck(this, WebTerminalInput);
	
	    var _this = _possibleConstructorReturn(this, (WebTerminalInput.__proto__ || Object.getPrototypeOf(WebTerminalInput)).call(this, props));
	
	    _this.state = {
	      prompt: props.prompt ? props.prompt : '> '
	    };
	    return _this;
	  }
	
	  _createClass(WebTerminalInput, [{
	    key: 'getInput',
	    value: function getInput() {
	      return this.buffer.getInput();
	    }
	  }, {
	    key: 'resetInputBuffer',
	    value: function resetInputBuffer() {
	      this.buffer.resetInputBuffer();
	    }
	  }, {
	    key: 'handleKeyDown',
	    value: function handleKeyDown(e) {
	      this.buffer.handleKeyDown(e);
	    }
	  }, {
	    key: 'onPaste',
	    value: function onPaste(e) {
	      this.buffer.onPaste(e);
	    }
	  }, {
	    key: 'onCommandEntered',
	    value: function onCommandEntered() {
	      if (this.props.onCommandEntered) this.props.onCommandEntered();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      return _react2.default.createElement(
	        'div',
	        { className: 'react-web-terminal-input' },
	        _react2.default.createElement(
	          'pre',
	          null,
	          this.state.prompt,
	          _react2.default.createElement(_reactWebTerminalInputBuffer2.default, { ref: function ref(buffer) {
	              _this2.buffer = buffer;
	            }, onCommandEntered: this.onCommandEntered.bind(this) })
	        )
	      );
	    }
	  }]);
	
	  return WebTerminalInput;
	}(_react2.default.Component);
	
	exports.default = WebTerminalInput;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(6);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactWebTerminalKeyboardData = __webpack_require__(7);
	
	var _reactWebTerminalCursor = __webpack_require__(10);
	
	var _reactWebTerminalCursor2 = _interopRequireDefault(_reactWebTerminalCursor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var WebTerminalInputBuffer = function (_React$Component) {
	  _inherits(WebTerminalInputBuffer, _React$Component);
	
	  function WebTerminalInputBuffer(props) {
	    _classCallCheck(this, WebTerminalInputBuffer);
	
	    var _this = _possibleConstructorReturn(this, (WebTerminalInputBuffer.__proto__ || Object.getPrototypeOf(WebTerminalInputBuffer)).call(this, props));
	
	    _this.state = {
	      input: ''
	    };
	    return _this;
	  }
	
	  _createClass(WebTerminalInputBuffer, [{
	    key: 'getInput',
	    value: function getInput() {
	      return this.state.input;
	    }
	  }, {
	    key: 'resetInputBuffer',
	    value: function resetInputBuffer() {
	      this.state.input = '';
	      this.cursor.moveToBegining();
	    }
	  }, {
	    key: 'insertText',
	    value: function insertText(text) {
	      this.state.input = this.getPreCursorStr() + text + this.cursor.getCursorChar() + this.getPostCursorStr();
	      this.cursor.moveRight(text.length);
	      this.setState(this.state);
	    }
	  }, {
	    key: 'handleKeyDown',
	    value: function handleKeyDown(e) {
	      var key = (0, _reactWebTerminalKeyboardData.getKey)(e);
	      if (key === 'Enter') {
	        this.onCommandEntered();
	      } else if (key === 'Backspace') {
	        var newPreCursorStr = this.getPreCursorStr().slice(0, this.getPreCursorStr().length - 1);
	        this.state.input = newPreCursorStr + this.cursor.getCursorChar() + this.getPostCursorStr();
	        this.cursor.moveLeft();
	        this.setState(this.state);
	      } else if (key === 'ArrowLeft') {
	        this.cursor.moveLeft();
	        this.forceUpdate();
	      } else if (key === 'ArrowRight') {
	        this.cursor.moveRight();
	        this.forceUpdate();
	      } else if (_reactWebTerminalKeyboardData.nonPrintableKeys.indexOf(key) === -1 && !e.altKey && !e.ctrlKey && !e.metaKey) {
	        this.insertText(key);
	      }
	    }
	  }, {
	    key: 'onPaste',
	    value: function onPaste(e) {
	      var pastedText = e.clipboardData.getData('Text');
	      this.insertText(pastedText);
	    }
	  }, {
	    key: 'onCommandEntered',
	    value: function onCommandEntered() {
	      if (this.props.onCommandEntered) this.props.onCommandEntered();
	    }
	  }, {
	    key: 'getPreCursorStr',
	    value: function getPreCursorStr() {
	      var cursorPos = this.cursor ? this.cursor.getCursorPos() : 0;
	      return this.getInput().slice(0, cursorPos);
	    }
	  }, {
	    key: 'getPostCursorStr',
	    value: function getPostCursorStr() {
	      var cursorPos = this.cursor ? this.cursor.getCursorPos() : 0;
	      return this.getInput().slice(cursorPos + 1, this.getInput().length);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      return _react2.default.createElement(
	        'span',
	        { className: 'react-web-terminal-input-buffer' },
	        this.getPreCursorStr(),
	        _react2.default.createElement(_reactWebTerminalCursor2.default, { ref: function ref(cursor) {
	            _this2.cursor = cursor;
	          }, inputMethod: this.getInput.bind(this) }),
	        this.getPostCursorStr()
	      );
	    }
	  }]);
	
	  return WebTerminalInputBuffer;
	}(_react2.default.Component);
	
	exports.default = WebTerminalInputBuffer;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(6);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var WebTerminalCursor = function (_React$Component) {
	  _inherits(WebTerminalCursor, _React$Component);
	
	  function WebTerminalCursor(props) {
	    _classCallCheck(this, WebTerminalCursor);
	
	    var _this = _possibleConstructorReturn(this, (WebTerminalCursor.__proto__ || Object.getPrototypeOf(WebTerminalCursor)).call(this, props));
	
	    _this.state = {
	      cursorPos: 0
	    };
	    return _this;
	  }
	
	  _createClass(WebTerminalCursor, [{
	    key: 'getInput',
	    value: function getInput() {
	      return this.props.inputMethod ? this.props.inputMethod() : '';
	    }
	  }, {
	    key: 'getCursorPos',
	    value: function getCursorPos() {
	      return this.state.cursorPos;
	    }
	  }, {
	    key: 'setCursorPos',
	    value: function setCursorPos(newPos) {
	      this.state.cursorPos = newPos;
	      this.setState(this.state);
	    }
	  }, {
	    key: 'moveLeft',
	    value: function moveLeft() {
	      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
	
	      if (this.state.cursorPos > 0) this.setCursorPos(this.getCursorPos() - amount);
	    }
	  }, {
	    key: 'moveRight',
	    value: function moveRight() {
	      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
	
	      if (this.state.cursorPos < this.getInput().length) this.setCursorPos(this.getCursorPos() + amount);
	    }
	  }, {
	    key: 'moveToBegining',
	    value: function moveToBegining() {
	      this.setCursorPos(0);
	    }
	  }, {
	    key: 'moveToEnd',
	    value: function moveToEnd() {
	      this.setCursorPos(this.getInput().length);
	    }
	  }, {
	    key: 'getCursorChar',
	    value: function getCursorChar() {
	      return this.getInput().charAt(this.getCursorPos());
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var cursorChar = this.getCursorChar();
	      return _react2.default.createElement(
	        'span',
	        { className: 'react-web-terminal-cursor' },
	        cursorChar === '' ? ' ' : cursorChar
	      );
	    }
	  }]);
	
	  return WebTerminalCursor;
	}(_react2.default.Component);
	
	exports.default = WebTerminalCursor;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,